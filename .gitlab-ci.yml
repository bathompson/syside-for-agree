variables:
  PACKAGE_NAME: sensmetry.sysml-2ls
  EXTENSION_NAME: $PACKAGE_NAME-${CI_COMMIT_SHORT_SHA}
  EXTENSION_PATH: $CI_PROJECT_DIR/$EXTENSION_NAME.vsix
  SERVER_FILENAME: syside-languageserver.js
  SERVER_RELPATH: packages/syside-vscode/dist/node/language-server/main.js
  SERVER_PATH: $CI_PROJECT_DIR/$SERVER_RELPATH

default:
  image: node:19.2
  before_script:
    - curl -f https://get.pnpm.io/v6.16.js | node - add --global pnpm@7
    - pnpm config set store-dir .pnpm-store
    - pnpm install --ignore-scripts
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - .pnpm-store

stages:
  - build
  - test
  - deploy
  - publish

build:
  stage: build
  script:
    - pnpm run lint
    - pnpm run build
  artifacts:
    # seems like gitlab doesn't pass untracked artifacts to the next stage by
    # default, use a short expiration time since they should only be available
    # for the next stage
    untracked: true
    expire_in: 5 mins
    exclude:
      - node_modules/**/*
      - packages/**/node_modules/**/*
      - .pnpm-store/**/*

test:
  stage: test
  coverage: /Lines\s*:\s*(\d+.?\d*)%/
  script:
    - pnpm run test:ci
  artifacts:
    paths:
      - coverage/
    when: always
    reports:
      junit:
        - junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

validate:
  stage: test
  script:
    - pnpm run prepare-validation
    - pnpm run run-validation

.package-template:
  stage: deploy
  script:
    - pnpm run vscode:package -o $EXTENSION_PATH
    - cp $SERVER_PATH $SERVER_FILENAME
  artifacts:
    paths:
      - $SERVER_FILENAME
      - $EXTENSION_PATH
    name: $EXTENSION_NAME
    expire_in: 1 mos

package:production:
  extends: .package-template
  rules:
    # do not run on tags
    - if: $VERSION
      when: never
    # only on pushes to main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  environment: production

package:development:
  extends: .package-template
  rules:
    # do not run on tags
    - if: $VERSION || $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    # only on pushes to other branches (i.e. MRs)
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  environment: development

pages:
  stage: deploy
  before_script: []
  needs:
    - job: test
      artifacts: true
  script:
    - mkdir .public
    - cp -r coverage/* .public
    - mv .public public
  artifacts:
    paths:
      - public
  only:
    - main

# =======================================================================
# Jobs for release
# =======================================================================

.on-release-template:
  rules:
    - if: $VERSION && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  environment: release
  variables:
    EXTENSION_NAME: $PACKAGE_NAME-$VERSION
    EXTENSION_FILENAME: $EXTENSION_NAME.vsix
    EXTENSION_RELPATH: $EXTENSION_FILENAME
    EXTENSION_PATH: $CI_PROJECT_DIR/$EXTENSION_FILENAME

package:release:
  stage: deploy
  extends: .on-release-template
  script:
    - >
      if [ $(git tag -l "$VERSION") ]; then
        echo "$VERSION tag already exists, bailing out"
        exit 1
      fi
    - echo "Preparing for $VERSION release"
    # update version fields
    - pnpm run --silent prepare-release $VERSION -o release.description
    # setup bot
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git config user.name "${GITLAB_USER_NAME}"
    # commit version changes
    - git add --all
    - git commit -m "Release $VERSION"
    - git tag ${VERSION}
    # package the extension
    - pnpm run vscode:package -o $EXTENSION_PATH
    - cp $SERVER_PATH $SERVER_FILENAME
    - echo PACKAGE_JOB_ID=$CI_JOB_ID >> release.env
    # push to github mirror first before gitlab can push automatically and this fails
    - git remote add github_origin https://github-ci-token:${GH_ACCESS_TOKEN}@github.com/sensmetry/sysml-2ls.git
    - git push github_origin HEAD:main -o ci.skip
    - git push github_origin HEAD:main --tags -o ci.skip
    # push changes as the last command, prevent triggering pipeline again with
    # -o ci.skip
    - git remote add gitlab_origin https://gitlab-ci-token:${ACCESS_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    - git push gitlab_origin HEAD:main -o ci.skip
    - git push gitlab_origin HEAD:main --tags -o ci.skip
  artifacts:
    paths:
      - $SERVER_FILENAME
      - $EXTENSION_PATH
      - release.description
    name: $EXTENSION_NAME
    # release builds never expire
    expire_in: never
    reports:
      dotenv: release.env

.publish-template:
  stage: publish
  extends: .on-release-template
  needs:
    - job: package:release
      artifacts: true

publish:release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  extends: .publish-template
  variables:
    ARTIFACTS_ROOT_URL: ${CI_SERVER_PROTOCOL}://${CI_SERVER_HOST}/${CI_PROJECT_PATH}/-/jobs/${PACKAGE_JOB_ID}/artifacts/raw
  before_script: []
  # cache is not needed, not running TS
  cache:
  script:
    - echo "Releasing $VERSION"
  release:
    # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: "$VERSION"
    description: ./release.description
    assets:
      links:
        - name: $EXTENSION_FILENAME
          url: $ARTIFACTS_ROOT_URL/$EXTENSION_RELPATH
        - name: $SERVER_FILENAME
          url: $ARTIFACTS_ROOT_URL/$SERVER_FILENAME

publish:github:
  extends: .publish-template
  script:
    - echo "Creating and uploading release artifacts to GitHub mirror for version $VERSION"
    - node ./scripts/gh-release.mjs --pat ${GH_ACCESS_TOKEN} --tag ${VERSION} --notes ./release.description -a ${EXTENSION_FILENAME}=${EXTENSION_PATH} -a ${SERVER_FILENAME}

publish:vscode:
  extends: .publish-template
  script:
    - pnpm run vscode:publish --packagePath $EXTENSION_PATH

publish:ovsx:
  extends: .publish-template
  script:
    - pnpm run ovsx:publish --packagePath $EXTENSION_PATH
